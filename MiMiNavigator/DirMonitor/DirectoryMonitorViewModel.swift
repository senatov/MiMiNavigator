//  DirectoryMonitorViewModel.swift
//  Directory Monitoring View Model Utility
//
//  Created by Iakov Senatov on 23.01.25.
//  Copyright ¬© 2025 Senatov. All rights reserved.
//
//  Dependencies: SwiftUI
//

/**

 struct ContentView: View {
 @StateObject private var viewModel = DirectoryMonitorViewModel(directoryPath: "/path/to/Sequoia")

 var body: some View {
 VStack {
 Text(viewModel.directoryChanged ? "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å! üö®" : "–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π ‚úÖ")
 .font(.title)
 .padding()

 Button("–°–±—Ä–æ—Å–∏—Ç—å") {
 viewModel.directoryChanged = false
 }
 }
 .animation(.default, value: viewModel.directoryChanged)
 }
 }

 */

import SwiftUI

@MainActor
final class DirectoryMonitorViewModel: ObservableObject {
    @Published var directoryChanged = false
    private var monitor: DirectoryMonitor?

    init(directoryPath: String = "/path/to/Sequoia") {
        startMonitoring(directoryPath: directoryPath)
    }

    private func startMonitoring(directoryPath: String) {
        monitor = DirectoryMonitor(directoryPath: directoryPath)
        monitor?.onDirectoryChanged = { [weak self] in
            guard let self = self else { return }  // –ó–∞—â–∏—Ç–∞ –æ—Ç —É–∂–µ –æ—Å–≤–æ–±–æ–∂–¥—ë–Ω–Ω–æ–≥–æ self
            Task { @MainActor in
                self.directoryChanged = true
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                DispatchQueue.main.asyncAfter(deadline: .now() + 1) {
                    self.directoryChanged = false
                }
            }
        }
    }

    deinit {
        Task { @MainActor in
            monitor?.stopMonitoring()
        }
        monitor = nil  // –Ø–≤–Ω–æ–µ –æ–±–Ω—É–ª–µ–Ω–∏–µ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
    }
}
